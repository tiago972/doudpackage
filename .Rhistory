subset<-data
"Min"<-min(subset[,i], na.rm=TRUE)
"Max"<-max(subset[,i], na.rm=TRUE)
"mediane"<-quantile(subset[,i], probs = seq(0,1,0.5),na.rm=TRUE)[2]
"first_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[2]
"third_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[4]
"prop_NAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0, round(prop.table(table(is.na(subset[,i])))[2] * 100, digits = digits.opt))
"NNAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0,table(is.na(subset[,i]))[2])
tmp_mat<-c(var = colnames(data)[i], "Min-Max"=paste(Min, Max, sep="-"),
"median(IQR)"=gsub(" ", "", paste(mediane, "(", first_quartile, "-", third_quartile, ")")),
NAs=gsub(" ", "", paste(NNAs, "(", prop_NAs, ")")))
return(tmp_mat)
}
#### Fonction pour le filtrage des elements selon les options choisies ####
ft_parse_quanti_opt<-function(data, min.max, na.print, group)
{
if (!isTRUE(min.max))
data<-data[,!names(data) %in% "Min-Max"]
if (!isTRUE(na.print))
{
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR))", sep = " ")
}
else
{
data[,'Total']<-paste(data[,'Total'], data[,'NAs'], sep = "; ")
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(data)
}
#### si pvalue est true #####
#' @import tidyr
ft_univ_quanti_p.value<-function(data, group, min.max, na.print,tab_tmp)
{
dicho<-ft_parse_quanti_opt(tab_tmp, min.max, na.print, group)
total<-ft_quanti(data, NULL, NULL, min.max, na.print)
biv<-ft_ana_biv(data, group)
total$Group <- "Total"
total<-merge(total, dicho, all=TRUE)
biv<-ft_rename_quanti_biv(biv, na.print)
total<-merge(total, biv, all.x=TRUE)
total<-total[,!names(total) %in% c("test", "signi")]
if (isTRUE(min.max))
total<-pivot_wider(total, names_from = "Group", values_from = c("Total", "Min-Max"))
else
total<-pivot_wider(total, names_from = "Group", values_from = c("Total"))
total$p<-ifelse(as.numeric(total$p) < 0.001, "< .001", round(as.numeric(total$p), digits = 3))
return(total)
}
### simple fonction coupee ####
ft_univ_quanti_2<-function(data, group, p.value, min.max, na.print, digits.opt){
tab_1<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab_1)=c("var", "Min-Max", "Total", "NAs")
tab_2<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab_2)=c("var", "Min-Max", "Total", "NAs")
j = 0;
for (i in 1:ncol(data))
{
if (colnames(data)[i]==group || !is.numeric(data[,i]))
next ;
j = j + 1
tmp_1<-ft_tab_quanti(data, i, group, levels(data[,group])[1], digits.opt)
tmp_2<-ft_tab_quanti(data, i, group, levels(data[,group])[2], digits.opt)
for (k in 1:4)
tab_1[j,k]<-tmp_1[k]
for (k in 1:4)
tab_2[j,k]<-tmp_2[k]
}
tab_1$Group=levels(data[,group])[1]
tab_2$Group=levels(data[,group])[2]
tmp<-merge(tab_1, tab_2, all=TRUE)
if (!isTRUE(p.value))
{
tmp<-ft_parse_quanti_opt(tmp, min.max, na.print, group)
if (!isTRUE(min.max))
tmp<-pivot_wider(tmp, names_from = "Group", values_from = "Total")
else
tmp<-pivot_wider(tmp, names_from = "Group", values_from = c("Total", "Min-Max"))
print("debug 5")
return (tmp)
}
else
return (ft_univ_quanti_p.value(data, group, min.max, na.print,tmp))
}
ft_quanti<-function(data, group=NULL, p.value, min.max, na.print, digits.opt){
if (is.null(group))
{
tab<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab)=c("var", "Min-Max", "Total", "NAs")
j = 0
for (i in 1:ncol(data))
{
if (!is.numeric(data[,i]))
next;
j = j + 1
tmp<-ft_tab_quanti(data,i, NULL, NULL, digits.opt)
for (k in 1:4)
tab[j,k]<-tmp[k]
}
print(head(tab, 2))
tab<-ft_parse_quanti_opt(tab, min.max, na.print, NULL)
print(head(tab, 2))
return(tab)
}
else
return(ft_univ_quanti_2(data, group, p.value, min.max, na.print, digits.opt))
}
# library(doudpackage)
test<-ft_desc_tab(bdd, na.print = T)
#### Fonction annexe pour renommer la var contene dans biv comme celles du dataframe de sortie ###
ft_rename_quanti_biv<-function(biv, na.print)
{
if (!isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR))", sep = " ")
}
else if (isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(biv)
}
#### Fonction principale pour les differents elements de l analyse univariee ####
ft_tab_quanti<-function(data, i, group=NULL, group_level=NULL, digits.opt)
{
if (!is.null(group))
subset<-data[which(data[,group]==group_level),]
else
subset<-data
"Min"<-min(subset[,i], na.rm=TRUE)
"Max"<-max(subset[,i], na.rm=TRUE)
"mediane"<-quantile(subset[,i], probs = seq(0,1,0.5),na.rm=TRUE)[2]
"first_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[2]
"third_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[4]
"prop_NAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0, round(prop.table(table(is.na(subset[,i])))[2] * 100, digits = digits.opt))
"NNAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0,table(is.na(subset[,i]))[2])
tmp_mat<-c(var = colnames(data)[i], "Min-Max"=paste(Min, Max, sep="-"),
"median(IQR)"=gsub(" ", "", paste(mediane, "(", first_quartile, "-", third_quartile, ")")),
NAs=gsub(" ", "", paste(NNAs, "(", prop_NAs, ")")))
return(tmp_mat)
}
#### Fonction pour le filtrage des elements selon les options choisies ####
ft_parse_quanti_opt<-function(data, min.max, na.print, group)
{
if (!isTRUE(min.max))
data<-data[,!names(data) %in% "Min-Max"]
if (!isTRUE(na.print))
{
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR))", sep = " ")
}
else
{
print(head(tab, 2))
data[,'Total']<-paste(data[,'Total'], data[,'NAs'], sep = "; ")
print(head(tab, 2))
data<-data[,!names(data) %in% "NAs"]
print(head(tab, 2))
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(data)
}
#### si pvalue est true #####
#' @import tidyr
ft_univ_quanti_p.value<-function(data, group, min.max, na.print,tab_tmp)
{
dicho<-ft_parse_quanti_opt(tab_tmp, min.max, na.print, group)
total<-ft_quanti(data, NULL, NULL, min.max, na.print)
biv<-ft_ana_biv(data, group)
total$Group <- "Total"
total<-merge(total, dicho, all=TRUE)
biv<-ft_rename_quanti_biv(biv, na.print)
total<-merge(total, biv, all.x=TRUE)
total<-total[,!names(total) %in% c("test", "signi")]
if (isTRUE(min.max))
total<-pivot_wider(total, names_from = "Group", values_from = c("Total", "Min-Max"))
else
total<-pivot_wider(total, names_from = "Group", values_from = c("Total"))
total$p<-ifelse(as.numeric(total$p) < 0.001, "< .001", round(as.numeric(total$p), digits = 3))
return(total)
}
### simple fonction coupee ####
ft_univ_quanti_2<-function(data, group, p.value, min.max, na.print, digits.opt){
tab_1<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab_1)=c("var", "Min-Max", "Total", "NAs")
tab_2<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab_2)=c("var", "Min-Max", "Total", "NAs")
j = 0;
for (i in 1:ncol(data))
{
if (colnames(data)[i]==group || !is.numeric(data[,i]))
next ;
j = j + 1
tmp_1<-ft_tab_quanti(data, i, group, levels(data[,group])[1], digits.opt)
tmp_2<-ft_tab_quanti(data, i, group, levels(data[,group])[2], digits.opt)
for (k in 1:4)
tab_1[j,k]<-tmp_1[k]
for (k in 1:4)
tab_2[j,k]<-tmp_2[k]
}
tab_1$Group=levels(data[,group])[1]
tab_2$Group=levels(data[,group])[2]
tmp<-merge(tab_1, tab_2, all=TRUE)
if (!isTRUE(p.value))
{
tmp<-ft_parse_quanti_opt(tmp, min.max, na.print, group)
if (!isTRUE(min.max))
tmp<-pivot_wider(tmp, names_from = "Group", values_from = "Total")
else
tmp<-pivot_wider(tmp, names_from = "Group", values_from = c("Total", "Min-Max"))
print("debug 5")
return (tmp)
}
else
return (ft_univ_quanti_p.value(data, group, min.max, na.print,tmp))
}
ft_quanti<-function(data, group=NULL, p.value, min.max, na.print, digits.opt){
if (is.null(group))
{
tab<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab)=c("var", "Min-Max", "Total", "NAs")
j = 0
for (i in 1:ncol(data))
{
if (!is.numeric(data[,i]))
next;
j = j + 1
tmp<-ft_tab_quanti(data,i, NULL, NULL, digits.opt)
for (k in 1:4)
tab[j,k]<-tmp[k]
}
tab<-ft_parse_quanti_opt(tab, min.max, na.print, NULL)
return(tab)
}
else
return(ft_univ_quanti_2(data, group, p.value, min.max, na.print, digits.opt))
}
# library(doudpackage)
test<-ft_desc_tab(bdd, na.print = T)
#### Fonction annexe pour renommer la var contene dans biv comme celles du dataframe de sortie ###
ft_rename_quanti_biv<-function(biv, na.print)
{
if (!isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR))", sep = " ")
}
else if (isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(biv)
}
#### Fonction principale pour les differents elements de l analyse univariee ####
ft_tab_quanti<-function(data, i, group=NULL, group_level=NULL, digits.opt)
{
if (!is.null(group))
subset<-data[which(data[,group]==group_level),]
else
subset<-data
"Min"<-min(subset[,i], na.rm=TRUE)
"Max"<-max(subset[,i], na.rm=TRUE)
"mediane"<-quantile(subset[,i], probs = seq(0,1,0.5),na.rm=TRUE)[2]
"first_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[2]
"third_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[4]
"prop_NAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0, round(prop.table(table(is.na(subset[,i])))[2] * 100, digits = digits.opt))
"NNAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0,table(is.na(subset[,i]))[2])
tmp_mat<-c(var = colnames(data)[i], "Min-Max"=paste(Min, Max, sep="-"),
"median(IQR)"=gsub(" ", "", paste(mediane, "(", first_quartile, "-", third_quartile, ")")),
NAs=gsub(" ", "", paste(NNAs, "(", prop_NAs, ")")))
return(tmp_mat)
}
#### Fonction pour le filtrage des elements selon les options choisies ####
ft_parse_quanti_opt<-function(data, min.max, na.print, group)
{
if (!isTRUE(min.max))
data<-data[,!names(data) %in% "Min-Max"]
if (!isTRUE(na.print))
{
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR))", sep = " ")
}
else
{
print(head(data, 2))
data[,'Total']<-paste(data[,'Total'], data[,'NAs'], sep = "; ")
print(head(data, 2))
data<-data[,!names(data) %in% "NAs"]
print(head(data, 2))
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(data)
}
#### si pvalue est true #####
#' @import tidyr
ft_univ_quanti_p.value<-function(data, group, min.max, na.print,tab_tmp)
{
dicho<-ft_parse_quanti_opt(tab_tmp, min.max, na.print, group)
total<-ft_quanti(data, NULL, NULL, min.max, na.print)
biv<-ft_ana_biv(data, group)
total$Group <- "Total"
total<-merge(total, dicho, all=TRUE)
biv<-ft_rename_quanti_biv(biv, na.print)
total<-merge(total, biv, all.x=TRUE)
total<-total[,!names(total) %in% c("test", "signi")]
if (isTRUE(min.max))
total<-pivot_wider(total, names_from = "Group", values_from = c("Total", "Min-Max"))
else
total<-pivot_wider(total, names_from = "Group", values_from = c("Total"))
total$p<-ifelse(as.numeric(total$p) < 0.001, "< .001", round(as.numeric(total$p), digits = 3))
return(total)
}
### simple fonction coupee ####
ft_univ_quanti_2<-function(data, group, p.value, min.max, na.print, digits.opt){
tab_1<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab_1)=c("var", "Min-Max", "Total", "NAs")
tab_2<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab_2)=c("var", "Min-Max", "Total", "NAs")
j = 0;
for (i in 1:ncol(data))
{
if (colnames(data)[i]==group || !is.numeric(data[,i]))
next ;
j = j + 1
tmp_1<-ft_tab_quanti(data, i, group, levels(data[,group])[1], digits.opt)
tmp_2<-ft_tab_quanti(data, i, group, levels(data[,group])[2], digits.opt)
for (k in 1:4)
tab_1[j,k]<-tmp_1[k]
for (k in 1:4)
tab_2[j,k]<-tmp_2[k]
}
tab_1$Group=levels(data[,group])[1]
tab_2$Group=levels(data[,group])[2]
tmp<-merge(tab_1, tab_2, all=TRUE)
if (!isTRUE(p.value))
{
tmp<-ft_parse_quanti_opt(tmp, min.max, na.print, group)
if (!isTRUE(min.max))
tmp<-pivot_wider(tmp, names_from = "Group", values_from = "Total")
else
tmp<-pivot_wider(tmp, names_from = "Group", values_from = c("Total", "Min-Max"))
print("debug 5")
return (tmp)
}
else
return (ft_univ_quanti_p.value(data, group, min.max, na.print,tmp))
}
ft_quanti<-function(data, group=NULL, p.value, min.max, na.print, digits.opt){
if (is.null(group))
{
tab<-data.frame("var"=NA, "Min-Max"=NA, "Total"=NA, "NAs"=NA)
colnames(tab)=c("var", "Min-Max", "Total", "NAs")
j = 0
for (i in 1:ncol(data))
{
if (!is.numeric(data[,i]))
next;
j = j + 1
tmp<-ft_tab_quanti(data,i, NULL, NULL, digits.opt)
for (k in 1:4)
tab[j,k]<-tmp[k]
}
tab<-ft_parse_quanti_opt(tab, min.max, na.print, NULL)
return(tab)
}
else
return(ft_univ_quanti_2(data, group, p.value, min.max, na.print, digits.opt))
}
# library(doudpackage)
test<-ft_desc_tab(bdd, na.print = T)
?map, ...)
?Map
View(bdd)
?apply
bdd2<-apply(bdd, MARGIN = 2, function(i){
if (is.numeric(bdd[,i]))
print(colnames(bdd[,i]))})
bdd2<-apply(bdd, MARGIN = 2, function(i){
prin(i)})
bdd2<-apply(bdd, MARGIN = 2, function(i){
print(i)})
bdd2<-apply(bdd, MARGIN = 2, function(i){
print(i)})
bdd2<-apply(bdd, MARGIN = 2, function(i){
print(summary(i))})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print(summary(i))})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print(i)})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print(i)})
bdd2<-apply(bdd, MARGIN = 1, function(i){
if (is.numeric(i))
print(i)})
bdd2<-apply(bdd, MARGIN = 1, function(i){
if (is.numeric(i)){
print(i)}
})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print("----")
print(i)
print("fin")
})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print("----")
print(i$ID)
print("fin")
})
bdd2<-apply(bdd, MARGIN = 1, function(i){
)
bdd2<-apply(bdd, MARGIN = 1, function(i){
print("----")
print(i[1])
print("fin")
})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print("----")
print(i[,'ID'])
print("fin")
})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print("----")
print(i['ID'])
print("fin")
})
bdd2<-apply(bdd, MARGIN = 2, function(i){
print("----")
print(i['ID'])
print("fin")
})
bdd2<-apply(bdd, MARGIN = 2, function(i){
print("----")
print(i)
print("fin")
})
?lapply
?tapply
bdd2<-sapply(bdd, MARGIN = 2, function(i){
print("----")
print(i)
print("fin")
})
bdd2<-sapply(bdd, function(i){
print("----")
print(i)
print("fin")
})
bdd2<-sapply(bdd, function(i){
print("----")
print(i)
print("fin")
})
bdd2<-sapply(bdd, function(i){
print("----")
if (is.numeric(i)){
print(i)}
print("fin")
})
bdd2<-sapply(bdd, function(i){
print("----")
if (is.numeric(i)){
print(i)}
print("fin")
})
bdd2<-sapply(bdd, function(i){
print("----")
if (is.numeric(i)){
print(i)}
print("fin")
})
bdd2<-apply(bdd, MARGIN = 2, function(i){
print("----")
if (is.numeric(i)){
print(i)}
print("fin")
})
bdd2<-apply(bdd, MARGIN = 2, function(i){
print("----")
if (is.numeric(i)){
print(i)}
print("fin")
})
bdd2<-apply(bdd, MARGIN = 1, function(i){
print("----")
if (is.numeric(i)){
print(i)}
print("fin")
})
bdd2<-sapply(bdd, function(i){
print("----")
if (is.numeric(i)){
colnames(bdd[,i ])
}
print("fin")
})
bdd2<-sapply(bdd, function(i, bdd){
print("----")
if (is.numeric(i)){
colnames(bdd[,i])
}
print("fin")
})
