trtc.V1 <- subset(trtc, subset=trtc$VISITE==1)
# Création de la base global.V1:
# A partir de global, maintien seulement des données de la visite 1 (global$VISITE ==1).
# n=3434
# Note : on a encore des patients pour lesquels VEHIC_ON = NA
global.V1 <- subset(global, subset=global$VISITE==1)
# Création des variables MEDNIV3 et MEDNIV23:
## Dictionnaires pour MEDNIV3 et MEDNIV23
i_medniv3<-c("N01AB01", "N01AB04", "N01AB06" ,"N01AB07", "N01AB08","N01AF03", "N01AH01",
"N01AH02", "N01AH03", "N01AH06", "N01AX03", "N01AX07", "N01AX11", "N01AX10",
"N01AX15", "N01AX", "N01BA04", "N01BB01", "N01BB09","N01BB10", "N03AE01",
"N03AX17", "N05AB03", "N05AD08", "N05BA01","N05BA02", "N05BA03",
"N05BA04","N05BA05","N05BA06","N05BA08","N05BA09", "N05BA011","N05BA012" ,
"N05BA016","N05BA018","N05BA021","N05BA023" ,"N05CA03","N05CD01",
"N05CD02", "N05CD03", "N05CD04", "N05CD05","N05CD06","N05CD07","N05CD08",
"N05CD09","N05CD11","N05CF01", "N05CF02","N05CM16" ,"N05CM18","N07XX04")
i_medniv23<-c("N01AB01","N01AB04","N01AB06","N01AB07","N01AB08","N01AF03","N01AH01",
"N01AH02","N01AH03","N01AH06","N01AX03","N01AX07","N01AX11","N01AX10",
"N01AX15","N01AX","N01BA04","N01BB01","N01BB09","N01BB10","N03AE01",
"N03AX17","N05AB03","N05AD08","N05BA01","N05BA02","N05BA03","N05BA04",
"N05BA05","N05BA06","N05BA08","N05BA09","N05BA011","N05BA012","N05BA016",
"N05BA018","N05BA021","N05BA023","N05CA03","N05CD01","N05CD02","N05CD03",
"N05CD04","N05CD05","N05CD06","N05CD07","N05CD08","N05CD09",
"N05CD11","N05CF01","N05CF02","N05CM16","N05CM18","N07XX04",
"N01AX13","N01BA02","N01BB03","N01BB08","N01BB51","N01BB53",
"N01BB58","N02AA01","N02AA03","N02AA05","N02AA08","N02AA",
"N02AB02","N02AB03","N02AC01","N02AD01","N02AE01","N02AF02",
"N02AX02","N02AX06","N03AX52","N02BG06","N02BG08","N02CC01",
"N02CC02","N02CC03","N02CC04","N02CC05","N02CC06","N02CC07",
"N02CX01","N02CX06","N02CX","N03AA02" ,"N03AA03","N03AA",
"N03AB02","N03AB05","N03AD01","N03AF01","N03AF02","N03AF03",
"N03AF04","N03AG01","N03AG02","N03AG04","N03AG05","N03AG06",
"N03AX09","N03AX10","N03AX11","N03AX12","N03AX14","N03AX15",
"N03AX16","N03AX18","N03AX21","N03AX22","N04AA01","N04AA02",
"N04AA12","N04BA02","N04BA03","N04BC01","N04BC02","N04BC04",
"N04BC05","N04BC06","N04BC07","N04BC08","N04BC09","N04BC",
"N04BX01","N04BX02","N05AA01","N05AA02","N05AA06","N05AB02",
"N05AB06","N05AB08","N05AC01","N05AC02","N05AC04","N05AD01",
"N05AD05","N05AD09","N05AE03","N05AF01","N05AF05","N05AG02",
"N05AG03","N05AH01","N05AH02","N05AH03","N05AH04","N05AL01",
"N05AL02","N05AL03","N05AL05","N05AN01","N05AX08","N05AX12",
"N05AX13","N05BB01","N05CX","N06AA01","N06AA02","N06AA04",
"N06AA05","N06AA06","N06AA09","N06AA12","N06AA16","N06AA17",
"N06AA21","N06AB03","N06AB04","N06AB05","N06AB06","N06AB08",
"N06AB10","N06AF05","N06AG02","N06AG03","N06AX01","N06AX03",
"N06AX09","N06AX11","N06AX12","N06AX14","N06AX16","N06AX17",
"N06AX21","N06AX22","N06AX26","N06BA04","N06BA07","N06BX03",
"N06DA02","N06DA03","N06DA04","N06DX01","N07AA01","N07AA02",
"N07AA30","N07BB01","N07BB04","N07BB05","N07BB","N07BC01",
"N07BC02","N07BC51","N07CA03","N07XX05","N07XX06","N07XX07","N07XX11")
## Remplacement selon dictionnaire avec 1 si trouve sinon recopie l'ATCCODE
trtc.V1$MEDNIV3<-"0"
trtc.V1$MEDNIV3<-mapvalues(trtc.V1$ATCCODE, from = i_medniv3, to=rep("1",length(i_medniv3)))
trtc.V1$MEDNIV3<-ifelse(trtc.V1$MEDNIV3!="1", "0", trtc.V1$MEDNIV3)
trtc.V1$MEDNIV23<-"0"
trtc.V1$MEDNIV23<-mapvalues(trtc.V1$ATCCODE, from = i_medniv23, to=rep("1", length(i_medniv23)))
trtc.V1$MEDNIV23<-ifelse(trtc.V1$MEDNIV23!="1", "0", trtc.V1$MEDNIV23)
# Création des variables NBMEDNIV3, NBMEDNIV23, MEDNIV3_ON, MEDNIV23_ON et POLYMED:
### Groupage selon l'ID du sujet (base en format LONG) pour summarise
trtc.V1<-group_by(trtc.V1, CTRPAT)
### NBMEDNIV3 et NBMEDNIV23
trtc.V1.summarized<-trtc.V1 %>% dplyr::summarise(NBMEDNIV3 = sum(as.numeric(MEDNIV3)),
NBMEDNIV23 = sum(as.numeric(MEDNIV23)))
trtc.V1.summarized$MEDNIV3_ON<-as.factor(ifelse(trtc.V1.summarized$NBMEDNIV3>0, 1, 0))
trtc.V1.summarized$MEDNIV23_ON<-as.factor(ifelse(trtc.V1.summarized$NBMEDNIV23>0, 1, 0))
### POLYMED:
### Groupage selon l'ID du sujet ET de la visite pour summarise (base en format LONG)
trtc.polym<-dplyr::summarise(trtc.V1, n = n())
trtc.polym$n<-as.factor(ifelse(trtc.polym$n>=5, "1", "0"))
trtc.polym<-dplyr::rename(trtc.polym, "POLYMED" = n)
# Création d’une base medniv regroupant les variables NBMEDNIV3, NBMEDNIV23, MEDNIV3_ON,
medniv <- merge(trtc.V1.summarized, trtc.polym, all = T)
# Concaténation de medniv à global.V1:
global.V1 <- merge(global.V1, medniv, by = "CTRPAT")
# Dans global.V1, codage des variables :
# NIVSCOL_C     ACTP_C     LIEUHAB_C     FUMEUR_C     AIDE_ON     PARAMED_ON     TBDEP_ON
# IMC_C     HTA_ON     RYTREGSIN_ON     MDRD     AVC_ON     DYSTHYR_ON     ARTH_ON     BPCOFIB
# TBTA_ON     TBFC_ON     CLASSEAGE     CLASSEFC     ICNIV     SAOSNIV     CL_MMSE     CL_GDS
# DOUL_ON     FA     DT2:
global.V1$NIVSCOL_C<-as.factor(ifelse(is.na(global.V1$NIVSCOL), NA,
ifelse(as.character(global.V1$NIVSCOL) =="1", "0", "1")))
global.V1$ACTP_C<-as.factor(ifelse(is.na(global.V1$ACTP), NA,
ifelse(as.character(global.V1$ACTP) == "3","0","1")))
global.V1$LIEUHAB_C<-as.factor(ifelse(is.na(global.V1$LIEUHAB), NA,
ifelse (as.character(global.V1$LIEUHAB) == "1" |
as.character(global.V1$LIEUHAB) == "2", "0", "1")))
global.V1$FUMEUR_C<-as.factor(ifelse(is.na(global.V1$FUMEUR), NA,
ifelse(as.character(global.V1$FUMEUR) == "4", "2",
ifelse(as.character(global.V1$FUMEUR) == "1", "0", "1"))))
global.V1$AIDE_ON<-as.factor(ifelse((!is.na(global.V1$ALD) & as.character(global.V1$ALD) == "1") |
(!is.na(global.V1$APA) & as.character(global.V1$APA) == "1") |
(!is.na(global.V1$MUTUEL) & as.character(global.V1$MUTUEL) == "1") |
(!is.na(global.V1$AIDDOM) & as.character(global.V1$AIDDOM) == "1") |
(!is.na(global.V1$RESSOIN) & as.character(global.V1$RESSOIN) == "1") |
(!is.na(global.V1$HAD) & as.character(global.V1$HAD) == "1"), "1",
ifelse (is.na(global.V1$ALD) | is.na(global.V1$APA) | is.na(global.V1$MUTUEL) |
is.na(global.V1$AIDDOM) | is.na(global.V1$RESSOIN) |is.na(global.V1$HAD),
NA, "0")))
global.V1$PARAMED_ON<-as.factor(ifelse((!is.na(global.V1$INF) & as.character(global.V1$INF) == "1") |
(!is.na(global.V1$KIN) & as.numeric(global.V1$KIN == "1")) |
(!is.na(global.V1$PEDIC) & as.character(global.V1$PEDIC) == "1"), "1",
ifelse (is.na(global.V1$INF) | is.na(global.V1$KIN) | is.na(global.V1$PEDIC),
NA, "0")))
global.V1$TBDEP_ON<-as.factor(ifelse((!is.na(global.V1$EPIDEP_ON) & as.character(global.V1$EPIDEP_ON) == "1") |
(!is.na(global.V1$ATCDDEP_ON) & as.character(global.V1$ATCDDEP_ON) == "1"), "1",
ifelse(is.na(global.V1$EPIDEP_ON) | is.na(global.V1$ATCDDEP_ON), NA, "0")))
global.V1$IMC_C<-ifelse(is.na(global.V1$POIDS) | is.na(global.V1$TAILLE), NA,
as.numeric(as.character(global.V1$POIDS))/((as.numeric(as.character(global.V1$TAILLE))/100) * (as.numeric(as.character(global.V1$TAILLE))/100)))
global.V1$HTA_ON<-as.factor(ifelse((!is.na(global.V1$PASA) & as.numeric(as.character(global.V1$PASA))>=140) |
(!is.na(global.V1$PADA) & as.numeric(as.character(global.V1$PADA))>=90) |
(!is.na(global.V1$trthta_) & as.numeric(as.character(global.V1$trthta_))==1),
"1", ifelse(is.na(global.V1$PASA) | is.na(as.character(global.V1$PADA)) |
is.na(global.V1$trthta_),  NA, "0")))
global.V1$RYTCAR_ON<-as.factor(ifelse((!is.na(global.V1$RYTCAR_ON) & as.character(global.V1$RYTCAR_ON) == "1") |
(!is.na(global.V1$RYTSIN_ON) & as.character(global.V1$RYTSIN_ON) == "1"),
"1", ifelse (is.na(global.V1$RYTCAR_ON) | is.na(global.V1$RYTSIN_ON), NA, "0")))
global.V1$MDRD<-as.numeric(ifelse(is.na(global.V1$BIO1) | is.na(global.V1$SEXE)|
is.na(global.V1$`_AGE`)| is.na(global.V1$ORIGAF_ON), NA,
ifelse(as.character(global.V1$SEXE) == "1" & as.character(global.V1$ORIGAF_ON) == "1",
186.3*((as.numeric(as.character(global.V1$BIO1))/88.4)^(-1.154) * as.numeric(as.character(global.V1$`_AGE`))^(-0.203) * 1.21),
ifelse(as.character(global.V1$SEXE) =="1" & as.character(global.V1 $ORIGAF_ON) =="0",
186.3*((as.numeric(as.character(global.V1$BIO1))/88.4)^(-1.154) * as.numeric(as.character(global.V1$`_AGE`))^(-0.203)),
ifelse (as.character(global.V1$SEXE) == "2" & as.character(global.V1$ORIGAF_ON) == "1",
186.3*((as.numeric(as.character(global.V1$BIO1))/88.4)^(-1.154) * as.numeric(as.character(global.V1$`_AGE`))^(-0.203) * 0.742*1.21),
186.3*((as.numeric(as.character(global.V1$BIO1))/88.4)^(-1.154) * as.numeric(as.character(global.V1$`_AGE`))^(-0.203)*0.742))))))
global.V1$AVC_ON<-as.factor(ifelse((!is.na(global.V1$CEREB) & as.character(global.V1$CEREB) == "1") |
(!is.na(global.V1$SEQAVC) & as.character(global.V1$SEQAVC) == "1"),
"1", ifelse(is.na(global.V1$CEREB) | is.na(global.V1$SEQAVC), NA, "0")))
global.V1$DYSTHYR_ON<-as.factor(ifelse((!is.na(global.V1$HYPOTHYR) & as.character(global.V1$HYPOTHYR) =="1") |
(!is.na(global.V1$HYPERTHYR) & as.character(global.V1$HYPERTHYR)== "1"), "1",
ifelse(is.na(global.V1$HYPOTHYR) | is.na(global.V1$HYPERTHYR), global.V1$DYSTHYR_ON <- "NA",
"0")))
global.V1$ARTH_ON<-as.factor(ifelse((!is.na(global.V1$ARTHROS) & as.character(global.V1$ARTHROS) == "1") |
(is.na(global.V1$RHUMINF) & as.character(global.V1$RHUMINF)=="1"),
"1", ifelse(is.na(global.V1$ARTHRO) | is.na(global.V1$RHUMINF), NA,  "0")))
global.V1$BPCOFIB<-as.factor(ifelse((!is.na(global.V1$BPCO) & as.character(global.V1$BPCO) =="1") |
(!is.na(global.V1$FIBROSE) & as.character(global.V1$FIBROSE) == "1"), "1",
ifelse(is.na(global.V1$BPCO) | is.na(global.V1$FIBROSE), NA, "0")))
global.V1$TBTA_ON<-as.factor(ifelse((!is.na(global.V1$PASA) & as.numeric(as.character(global.V1$PASA)) < 100) |
(!is.na(global.V1$PASA) & as.numeric(as.character(global.V1$PASA)) >= 180) |
(!is.na(global.V1$PADA) & as.numeric(as.character(global.V1$PADA)) < 60) |
(!is.na(global.V1$PADA) & as.numeric(as.character(global.V1$PADA)) >= 100),
"1", ifelse(is.na(global.V1$PASA) | is.na(global.V1$PADA),
NA, "0")))
global.V1$CLASSEAGE<-as.factor(ifelse(is.na(global.V1$`_AGE`), NA,
ifelse (as.numeric(as.character(global.V1$`_AGE`)) < 75,
"0", "1")))
global.V1$FC<-factor(ifelse(is.na(global.V1$FC), NA,
ifelse(as.numeric(as.character(global.V1$FC)) < 50, 0,
ifelse (as.numeric(as.character(global.V1$FC)) < 120,1,
2))))
global.V1$TBFC_ON<-as.factor(ifelse(is.na(global.V1$FC), NA,
ifelse (as.numeric(as.character(global.V1$FC)) < 50 |
as.numeric(as.character(global.V1$FC)) >= 120,
1,  0)))
global.V1$ICNIV<-as.factor(ifelse(is.na(global.V1$INSCARD) | (as.character(global.V1$INSCARD) == "1"
& is.na(global.V1$NYHA)),
NA, ifelse(as.character(global.V1$INSCARD) == "0", "0",
ifelse(as.character(global.V1$INSCARD) == '1' &
(as.character(global.V1$NYHA)== "1" | as.character(global.V1$NYHA) == "2"),
"1", "2"))))
global.V1$SAOSNIV<-as.factor(ifelse(is.na(global.V1$APNEE) | (as.character(global.V1$APNEE) == "1" &
is.na(global.V1$CPAP_ON)), NA, ifelse(as.character(global.V1$APNEE) == "0",
"0", ifelse(as.character(global.V1$APNEE) == "1" & as.character(global.V1$CPAP_ON) == "1",
"1", "2"))))
global.V1$CL_MMSE<-as.factor(ifelse(is.na(global.V1$`_SCMMSE`), NA,
ifelse (as.numeric(as.character(global.V1$`_SCMMSE`)) < 24,
"0", ifelse (as.numeric(as.character(global.V1$`_SCMMSE`)) < 27,
"1", "2"))))
global.V1$CL_GDS<-as.factor(ifelse(is.na(global.V1$`_SCGDS`), NA,
ifelse (as.numeric(as.character(global.V1$`_SCGDS`)) < 10, "0", "1")))
global.V1$OBSERV
global.V1$FA<-ifelse(as.character(global.V1$OBSERV)=="FA", "1", global.V1$FA)
global.V1$DT2<-ifelse(as.character(global.V1$OBSERV)=="DB", "1", global.V1$DT2)
global.V1$DOUL_ON<-ifelse(as.character(global.V1$OBSERV)=="DL", "1", global.V1$DOUL_ON)
# Dans global.V1, création des variables :
# INTERCA     NBINTERCA :
global.V1$INTERCA<-as.factor(ifelse((!is.na(global.V1$ICNIV) & as.character(global.V1$ICNIV) == "2") |
(!is.na(global.V1$`_SCMMSE`) & as.numeric(as.character(global.V1$`_SCMMSE`)) < 24) |
(!is.na(global.V1$APNEE) & as.character(global.V1$APNEE)=="1") |
(!is.na(global.V1$MEDNIV23_ON) & as.numeric(as.character(global.V1$MEDNIV23_ON))==1), "1",
ifelse (is.na(global.V1$ICNIV) | is.na(global.V1$`_SCMMSE`) | is.na(global.V1$APNEE) |
is.na(global.V1$MEDNIV23_ON), NA, "0")))
global.V1$NBINTERCA<-as.numeric(ifelse(is.na(global.V1$INTERCA), NA, 0))
global.V1$NBINTERCA<-as.numeric(ifelse(!is.na(global.V1$ICNIV) & as.character(global.V1$ICNIV) == "2",
global.V1$NBINTERC + 1, global.V1$NBINTERC))
global.V1$NBINTERCA<-as.numeric(ifelse(!is.na(global.V1$`_SCMMSE`) & as.character(as.numeric(global.V1$`_SCMMSE`)) < 24,
global.V1$NBINTERC + 1, global.V1$NBINTERC))
global.V1$NBINTERCA<-as.numeric(ifelse(!is.na(global.V1$APNEE) & as.character(global.V1$APNEE) == "1",
global.V1$NBINTERC + 1, global.V1$NBINTERC))
global.V1$NBINTERCA<-as.numeric(ifelse(!is.na(global.V1$MEDNIV23_ON) & as.character(global.V1$MEDNIV23_ON) == "1",
global.V1$NBINTERC + 1, global.V1$NBINTERC))
# Création de la base de travail pour l’étude 1, bdd.E1:
# A partir de global.V1, exclusion des patients pour lesquels VEHIC_ON n’est pas renseigné:
global.V1 <- subset(global.V1, subset = is.na(global.V1$VEHIC_ON)==FALSE)
# A partir de global.V1, maintien seulement des variables utiles :
bdd.E1 <- subset(global.V1, select=c(VEHIC_ON, `_AGE`, `_ADL`, `_IADL`, CL_MMSE, CL_GDS, IMC_C, MDRD, SEXE, LIEUHAB, LIEUHAB_C, NIVSCOL_C, ACTP_C, FUMEUR_C, ALC_ON, LIEUVIE, AIDE_ON, PARAMED_ON, TBDEP_ON, AGEPHYSIO, MA, FA, PARKIN, AVC_ON, DYSTHYR_ON, DT2, HYPOGSEV, CHUTE, ARTH_ON, DOUL_ON, APNEE, BPCOFIB, HTA_ON, POLYMED, MEDNIV23_ON, OBSERV, ICNIV, INTERCA, NBINTERCA, NBMEDNIV23, NBVERJ))
bdd.E1$VEHIC_ON <- as.factor(bdd.E1$VEHIC_ON)
##############################################################################
# Verification de si il y a eu un changement de statut de VEHIC_ON au cours du temps
for (i in 1:6){
for (j in 1:(7 - i))
if (global$VISITE == i && global$VEHIC_ON == "1" && global$VISITE == i + j && global$VEHIC_ON == "0")
print(paste("i =", i, "j = ", j, "ID = ", global$CTRPAT))
else
print(paste("i =", i, "j = ", j, "NOP"))
}
##################################### DM #######################
library(doudpackage)
for (i in 1:ncol(bdd.E1))
{
if (is.numeric(bdd.E1[,i]) && mean(bdd.E1[,i], na.rm = T) < 3)
bdd.E1[,i]<-as.factor(as.character(bdd.E1[,i]))
if (is.character(bdd.E1[,i]))
bdd.E1[,i]<-as.factor(bdd.E1[,i])
}
summary(bdd.E1)
############################################
################ Cut-off ##################
# for (i in 1:ncol(bdd.E1))
#     if (is.numeric(bdd.E1[,i]))
#       print(colnames(bdd.E1)[i])
# library(DescTools)
#
# summary(as.factor(bdd.E1$`_ADL`))
# i = 0;
# while (i < 7) {
# bdd.E1$adl_quali<-as.factor(ifelse(bdd.E1$`_ADL`<=i, 0, 1))
# reg_adl<-glm(bdd.E1$VEHIC_ON~bdd.E1$adl_quali, family = "binomial")
# auc<-Cstat(x= predict(reg_adl, type="response"),
#       resp = model.response((model.frame(reg_adl))))
# cat("\ni = ", i, "auc = ", auc,"\n")
# print(summary(bdd.E1$adl_quali))
# i = i + 0.5
# rm(reg_adl)
# }
#
# i = 0;
# while (i < 4) {
#   bdd.E1$iadl_quali<-as.factor(ifelse(bdd.E1$`_IADL`<=i, 0, 1))
#   reg_iadl<-glm(bdd.E1$VEHIC_ON~bdd.E1$iadl_quali, family = "binomial")
#   auc<-Cstat(x= predict(reg_iadl, type="response"),
#              resp = model.response((model.frame(reg_iadl))))
#   cat("i = ", i, "auc = ", auc, "\n")
#   print(summary(bdd.E1$iadl_quali))
#   i = i + 1
#   rm(reg_iadl)
# }
################ Au final: Ils sont tous très peu dépendants donc faire une varible binaire a peu de sens:
# les AUC les meilleurs sont pous <= 5.5 pour les ADL et <3 pour IADL, vraiment peu d'intérêt.
### Le reste des analyses a été faite sans dichotomisé l'IMC car je ne sais pas comment tu veux le diviser
univ<-ft_ana_biv(bdd.E1, "VEHIC_ON", signi = 0.1)
View(univ)
library(psy)
?fpca
?psy
help(package="psy")
### Le reste des analyses a été faite sans dichotomisé l'IMC car je ne sais pas comment tu veux le diviser
biv<-ft_ana_biv(bdd.E1, "VEHIC_ON", signi = 0.1)
rm(univ)
i = 1;
while (i < 40)
{
acp_exp<-c(biv$var[order(biv$p)][i:(i + 10)])
mdspca(biv[,acp_exp])
i = i * 10
}
View(biv)
acp_exp<-c(biv$var[order(biv$p)][i:(i + 10)])
mspca(bdd.E1[,acp_exp])
mdspca(bdd.E1[,acp_exp])
mdspca(bdd.E1[,acp_exp])
i = 1;
rm(acp_exp)
i = 1;
acp_exp<-c(biv$var[order(biv$p)][i:(i + 10)])
acp_exp
bdd.E1[,acp_exp]
fpca(data = bdd.E1, y = "VEHIC_ON", x = acp_exp)
i = 1;
while (i < 40)
{
acp_exp<-c(biv$var[order(biv$p)][i:(i + 10)])
fpca(data = bdd.E1, y = "VEHIC_ON", x = acp_exp)
i = i * 10
}
i = 1;
i = 1;
while (i < 40)
{
acp_exp<-c(biv$var[order(biv$p)][i:(i + 9)])
fpca(data = bdd.E1, y = "VEHIC_ON", x = acp_exp)
i = i + 10
}
i = 1;
while (i < 40)
{
acp_exp<-c(biv$var[order(biv$p)][i:(i + 9)])
print(acp_exp)
fpca(data = bdd.E1, y = "VEHIC_ON", x = acp_exp)
i = i + 10
}
### Le reste des analyses a été faite sans dichotomisé l'IMC car je ne sais pas comment tu veux le diviser
bdd.E1<-bdd.E1[,-"OBSERV"]
### Le reste des analyses a été faite sans dichotomisé l'IMC car je ne sais pas comment tu veux le diviser
bdd.E1<-bdd.E1[,!names(bdd.E1) %in% c("OBSERV")]
biv<-ft_ana_biv(bdd.E1, "VEHIC_ON", signi = 0.1)
library(psy)
i = 1;
while (i < 40)
{
acp_exp<-c(biv$var[order(biv$p)][i:(i + 9)])
print(acp_exp)
fpca(data = bdd.E1, y = "VEHIC_ON", x = acp_exp)
i = i + 10
}
i = 1;
while (i < 39)
{
if (i < 31)
acp_exp<-c(biv$var[order(biv$p)][i:(i + 9)])
else
acp_exp<-c(biv$var[order(biv$p)][i:(i + 8)])
print(acp_exp)
fpca(data = bdd.E1, y = "VEHIC_ON", x = acp_exp)
i = i + 10
}
load(devtools)
library(devtools)
#' Parsing function for Html output
#'
#' Function that allows you to create a table ready to be used in article.
#'  Output is generated in HTML by KableExtra
#' @param data A database, dataframe object
#' @param col_order A vector containing column indexes or names to use for column order
#' @param group.name A list containing column names to use. Need to be given in the same order as col_order
#' @return Return an html KableExtra object.
#' @export
#' @import KableExtra
ft_parse<-function(data, col_order = NULL, group.name = NULL)
{
if (!is.null(col_order))
}
#' Parsing function for Html output
#'
#' Function that allows you to create a table ready to be used in article.
#'  Output is generated in HTML by KableExtra
#' @param data A database, dataframe object
#' @param col_order A vector containing column indexes or names to use for column order
#' @param group.name A list containing column names to use. Need to be given in the same order as col_order
#' @import KableExtra
#' @return Return an html KableExtra object.
#' @export
ft_parse<-function(data, col_order = NULL, group.name = NULL)
{
if (!is.null(col_order))
data<-data[,col_order]
return(data)
}
head(test3, 1)
setwd("/Users/Tiago/Desktop/BF\ is\ cool/doudpackage/tmp")
source('./ft_quali.R')
source('./ft_quanti.R')
source('./tools.R')
source('./ft_ana_biv.R')
source('./ft_quanti.R')
source('./ft_univ_tab.R')
source('./ft_parse.R')
setwd("/Users/Tiago/Desktop/BF\ is\ cool/nagisa")
source('./nagisa.R')
# library(doudpackage)
test3<-ft_desc_tab(bdd, na.print = T, p.value = T, group = "vivant.s4")
head(test3, 1)
### Le but va être de créer une fonction pour récupérer les arguments en faite c'est tout
ft_parse(test3, c("var", "Total", "1", "0", "p"))
### Le but va être de créer une fonction pour récupérer les arguments en faite c'est tout
test4<-ft_parse(test3, c("var", "Total", "1", "0", "p"))
head(test4, 1)
?summarise
plyr::ddply(test3, .variables = "vivant.s4", .fun = sum())
plyr::ddply(test3, "vivant.s4", .sum())
plyr::ddply(bdd, "vivant.s4", .sum())
plyr::ddply(bdd, "vivant.s4", sum())
?sum
plyr::ddply(bdd, "vivant.s4", sum)
plyr::ddply(bdd$vivant.s4, "vivant.s4", sum)
plyr::ddply(bdd, ~ vivant.s4, sum)
plyr::ddply(bdd, ~ as.numeric(vivant.s4), sum)
plyr::ddply(bdd$vivant.s4, ~ as.numeric(vivant.s4), sum)
summarise(bdd, "vivant.s4")
?summarise
summarise(bdd, n = summary(bdd$vivant.s4))
summary(bdd$vivant.s4)
summarise(bdd, n = n(bdd$vivant.s4), .groups = "vivant.s4")
summarise(bdd, n = n(), .groups = "vivant.s4")
bdd %>%
group_by(vivant.s4) %>%
summarise(n = n())
bdd %>%
group_by(vivant.s4)
bdd %>%
dplyr::group_by(vivant.s4) %>%
dplyr::summarise(n = n())
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
bdd %>%
dplyr::group_by(vivant.s4) %>%
dplyr::summarise(n = n())
bdd %>%
dplyr::group_by(vivant.s4) %>%
summary(bdd$vivant.s4)
bdd %>%
dplyr::count(vivant.s4)
bdd %>%
dplyr::count(vivant.s4)[1,1]
bdd %>%
dplyr::count(vivant.s4)[1,1]
a<-bdd %>%
dplyr::count(vivant.s4)
a
a[1]
a[2,1]
a[2]
a[2, 1]
a[2, 2]
a[2, 3]
a[2[1]]
a[2[1[1]]]
a[2[1[2]]]
a[2[1]]
a[2]
a[2][1]
as.data.frame(a)
as.data.frame(a)[2,1]
as.data.frame(a)[2,]
as.data.frame(a)[2,2]
a[2,2]
a[1,2]
a[3,2]
setwd("/Users/Tiago/Downloads")
library(dplyr)
### Infection ###
UGA<-read.csv2("Infections/Infections UGA.csv")
SSR_ortho<-read.csv2("Infections/Infection SSR ortho.csv")
SSR_polypatho<-read.csv2("Infections/Infections SSR polypatho (no covid).csv")
SSR_polypatho.covid<-read.csv2("Infections/Infection SSR polypatho covid.csv")
extractions<-rbind(UGA, SSR_ortho, SSR_polypatho, SSR_polypatho.covid)
extractions<-extractions[,c("ipp", "date_debut_visite", "code_unite_responsabilite")]
summary(as.factor(extractions$ipp))
View(extractions)
write.csv2(extractions, "infections.csv")
setwd("/Users/Tiago/Desktop/BF is cool/Anne Laure")
library(lubridate)
library(doudpackage)
bdd<-read.csv2("dma.csv", na.strings = '')
bdd<-bdd[,-c(2:6, 8:11)]
bdd<-bdd[,!colnames(bdd) %in% c("SqlPatientId","PatientId", "PatientAnneeNaissance",
"PatientCodeCommune", "PatientProfession", "ActeId", "DclDateActe",
"DclPRType", "DclPRVisite", "ActeEnvoye", "PatientDateDeces")]
summary(bdd)
for (i in 1:ncol(bdd))
{
col_name<-colnames(bdd)[i]
if (grepl(".*date.*", col_name , ignore.case = T))
bdd[,i]<-as.Date(as.character(bdd[,i]), tryFormats = c("%d/%m/%Y"))
if (is.character(bdd[,i]))
{
bdd[,i]<-as.factor(bdd[,i])
if (nlevels(bdd[,i]) > 15)
bdd[,i]<-as.character(bdd[,i])
}
}
bdd[,"PatientCodeDepartement"]<-as.factor(bdd[,"PatientCodeDepartement"])
bdd$DclDiagnostic31<-as.factor(bdd$DclDiagnostic31)
bdd$DclDiagnostic32<-as.factor(bdd$DclDiagnostic32)
bdd$DclDiagnostic33<-as.factor(bdd$DclDiagnostic33)
summary(bdd)
bdd[,"foreigner"]<-as.factor(ifelse(is.na(bdd[,"PatientCodeDepartement"]), NA,
ifelse(bdd[,"PatientCodeDepartement"] == "99", "1", "0")))
setwd("/Users/Tiago/Desktop/BF is cool/Anne Laure")
library(lubridate)
library(doudpackage)
bdd<-read.csv2("dma.csv", na.strings = '')
bdd<-bdd[,-c(2:6, 8:11)]
bdd<-bdd[,!colnames(bdd) %in% c("SqlPatientId","PatientId", "PatientAnneeNaissance",
"PatientCodeCommune", "PatientProfession", "ActeId", "DclDateActe",
"DclPRType", "DclPRVisite", "ActeEnvoye", "PatientDateDeces")]
summary(bdd)
for (i in 1:ncol(bdd))
{
col_name<-colnames(bdd)[i]
if (grepl(".*date.*", col_name , ignore.case = T))
bdd[,i]<-as.Date(as.character(bdd[,i]), tryFormats = c("%d/%m/%Y"))
if (is.character(bdd[,i]))
{
bdd[,i]<-as.factor(bdd[,i])
if (nlevels(bdd[,i]) > 15)
bdd[,i]<-as.character(bdd[,i])
}
}
bdd[,"PatientCodeDepartement"]<-as.factor(bdd[,"PatientCodeDepartement"])
bdd$DclDiagnostic31<-as.factor(bdd$DclDiagnostic31)
bdd$DclDiagnostic32<-as.factor(bdd$DclDiagnostic32)
bdd$DclDiagnostic33<-as.factor(bdd$DclDiagnostic33)
summary(bdd)
bdd[,"foreigner"]<-as.factor(ifelse(is.na(bdd[,"PatientCodeDepartement"]), NA,
ifelse(bdd[,"PatientCodeDepartement"] == "99", "1", "0")))
bdd<-bdd[,!colnames(bdd) %in% c("PatientCodeDepartement")]
View(bdd)
