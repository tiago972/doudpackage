else
total<-pivot_wider(total, names_from = "Group", values_from = c("median(IQR)"))
total$p<-ifelse(as.numeric(total$p) < 0.001, "< .001", round(as.numeric(total$p), digits = 3))
return(total)
}
### simple fonction coupee ####
ft_univ_quanti_2<-function(data, group, p.value, min.max, na.print, digits.opt){
tab_1<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab_1)=c("var", "Min-Max", "median(IQR)", "NAs")
tab_2<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab_2)=c("var", "Min-Max", "median(IQR)", "NAs")
j = 0;
for (i in 1:ncol(data))
{
if (colnames(data)[i]==group || !is.numeric(data[,i]))
next ;
j = j + 1
tmp_1<-ft_tab_quanti(data, i, group, levels(data[,group])[1], digits.opt)
tmp_2<-ft_tab_quanti(data, i, group, levels(data[,group])[2], digits.opt)
for (k in 1:4)
tab_1[j,k]<-tmp_1[k]
for (k in 1:4)
tab_2[j,k]<-tmp_2[k]
}
tab_1$Group=levels(data[,group])[1]
tab_2$Group=levels(data[,group])[2]
tmp<-merge(tab_1, tab_2, all=TRUE)
if (!isTRUE(p.value))
{
tmp<-ft_parse_quanti_opt(tmp, min.max, na.print, group)
if (!isTRUE(min.max))
tmp<-pivot_wider(tmp, names_from = "Group", values_from = "median(IQR)")
else
tmp<-pivot_wider(tmp, names_from = "Group", values_from = c("median(IQR)", "Min-Max"))
return (tmp)
}
else
return (ft_univ_quanti_p.value(data, group, min.max, na.print,tmp))
}
ft_quanti<-function(data, group=NULL, p.value, min.max, na.print, digits.opt){
if (is.null(group))
{
tab<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab)=c("var", "Min-Max", "median(IQR)", "NAs")
j = 0
for (i in 1:ncol(data))
{
if (!is.numeric(data[,i]))
next;
j = j + 1
tmp<-ft_tab_quanti(data,i, NULL, NULL, digits.opt)
for (k in 1:4)
tab[j,k]<-tmp[k]
}
tab<-ft_parse_quanti_opt(tab, min.max, na.print, NULL)
return(tab)
}
else
return(ft_univ_quanti_2(data, group, p.value, min.max, na.print, digits.opt))
}
# library(doudpackage)
test<-ft_desc_tab(bdd)
#### Fonction annexe pour renommer la var contene dans biv comme celles du dataframe de sortie ###
ft_rename_quanti_biv<-function(biv, na.print)
{
if (!isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR))", sep = " ")
}
else if (isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(biv)
}
#### Fonction principale pour les differents elements de l analyse univariee ####
ft_tab_quanti<-function(data, i, group=NULL, group_level=NULL, digits.opt)
{
if (!is.null(group))
subset<-data[which(data[,group]==group_level),]
else
subset<-data
print(colnames(subset)[i])
"Min"<-min(subset[,i], na.rm=TRUE)
"Max"<-max(subset[,i], na.rm=TRUE)
"mediane"<-quantile(subset[,i], probs = seq(0,1,0.5),na.rm=TRUE)[2]
"first_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[2]
"third_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[4]
"prop_NAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0, round(prop.table(table(is.na(subset[,i])))[2] * 100, digits = digits.opt))
"NNAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0,table(is.na(subset[,i]))[2])
tmp_mat<-c(var = colnames(data)[i], "Min-Max"=paste(Min, Max, sep="-"),
"median(IQR)"=gsub(" ", "", paste(mediane, "(", first_quartile, "-", third_quartile, ")")),
NAs=gsub(" ", "", paste(NNAs, "(", prop_NAs, ")")))
return(tmp_mat)
}
#### Fonction pour le filtrage des elements selon les options choisies ####
ft_parse_quanti_opt<-function(data, min.max, na.print, group)
{
if (!isTRUE(min.max))
data<-data[,!names(data) %in% "Min-Max"]
if (!isTRUE(na.print))
{
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR))", sep = " ")
}
else if (isTRUE(na.print) && !is.null(group))
{
data[,'median(IQR)']<-paste(data[,'median(IQR)'], data[,'NAs'], sep = "; ")
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(data)
}
#### si pvalue est true #####
#' @import tidyr
ft_univ_quanti_p.value<-function(data, group, min.max, na.print,tab_tmp)
{
dicho<-ft_parse_quanti_opt(tab_tmp, min.max, na.print, group)
total<-ft_quanti(data, NULL, NULL, min.max, na.print)
biv<-ft_ana_biv(data, group)
total$Group <- "Total"
total<-merge(total, dicho, all=TRUE)
biv<-ft_rename_quanti_biv(biv, na.print)
total<-merge(total, biv, all.x=TRUE)
total<-total[,!names(total) %in% c("test", "signi")]
if (isTRUE(min.max))
total<-pivot_wider(total, names_from = "Group", values_from = c("median(IQR)", "Min-Max"))
else
total<-pivot_wider(total, names_from = "Group", values_from = c("median(IQR)"))
total$p<-ifelse(as.numeric(total$p) < 0.001, "< .001", round(as.numeric(total$p), digits = 3))
return(total)
}
### simple fonction coupee ####
ft_univ_quanti_2<-function(data, group, p.value, min.max, na.print, digits.opt){
tab_1<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab_1)=c("var", "Min-Max", "median(IQR)", "NAs")
tab_2<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab_2)=c("var", "Min-Max", "median(IQR)", "NAs")
j = 0;
for (i in 1:ncol(data))
{
if (colnames(data)[i]==group || !is.numeric(data[,i]))
next ;
j = j + 1
tmp_1<-ft_tab_quanti(data, i, group, levels(data[,group])[1], digits.opt)
tmp_2<-ft_tab_quanti(data, i, group, levels(data[,group])[2], digits.opt)
for (k in 1:4)
tab_1[j,k]<-tmp_1[k]
for (k in 1:4)
tab_2[j,k]<-tmp_2[k]
}
tab_1$Group=levels(data[,group])[1]
tab_2$Group=levels(data[,group])[2]
tmp<-merge(tab_1, tab_2, all=TRUE)
if (!isTRUE(p.value))
{
tmp<-ft_parse_quanti_opt(tmp, min.max, na.print, group)
if (!isTRUE(min.max))
tmp<-pivot_wider(tmp, names_from = "Group", values_from = "median(IQR)")
else
tmp<-pivot_wider(tmp, names_from = "Group", values_from = c("median(IQR)", "Min-Max"))
return (tmp)
}
else
return (ft_univ_quanti_p.value(data, group, min.max, na.print,tmp))
}
ft_quanti<-function(data, group=NULL, p.value, min.max, na.print, digits.opt){
if (is.null(group))
{
tab<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab)=c("var", "Min-Max", "median(IQR)", "NAs")
j = 0
for (i in 1:ncol(data))
{
if (!is.numeric(data[,i]))
next;
j = j + 1
tmp<-ft_tab_quanti(data,i, NULL, NULL, digits.opt)
for (k in 1:4)
tab[j,k]<-tmp[k]
}
tab<-ft_parse_quanti_opt(tab, min.max, na.print, NULL)
return(tab)
}
else
return(ft_univ_quanti_2(data, group, p.value, min.max, na.print, digits.opt))
}
# library(doudpackage)
test<-ft_desc_tab(bdd)
#### Fonction annexe pour renommer la var contene dans biv comme celles du dataframe de sortie ###
ft_rename_quanti_biv<-function(biv, na.print)
{
if (!isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR))", sep = " ")
}
else if (isTRUE(na.print))
{
for (i in 1:nrow(biv))
biv[i,1]<-paste(biv[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(biv)
}
#### Fonction principale pour les differents elements de l analyse univariee ####
ft_tab_quanti<-function(data, i, group=NULL, group_level=NULL, digits.opt)
{
if (!is.null(group))
subset<-data[which(data[,group]==group_level),]
else
subset<-data
"Min"<-min(subset[,i], na.rm=TRUE)
"Max"<-max(subset[,i], na.rm=TRUE)
"mediane"<-quantile(subset[,i], probs = seq(0,1,0.5),na.rm=TRUE)[2]
"first_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[2]
"third_quartile"<-quantile(subset[,i], probs = seq(0,1,0.25),na.rm=TRUE)[4]
"prop_NAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0, round(prop.table(table(is.na(subset[,i])))[2] * 100, digits = digits.opt))
"NNAs"<-ifelse(is.na(table(is.na(subset[,i]))[2]), 0,table(is.na(subset[,i]))[2])
tmp_mat<-c(var = colnames(data)[i], "Min-Max"=paste(Min, Max, sep="-"),
"median(IQR)"=gsub(" ", "", paste(mediane, "(", first_quartile, "-", third_quartile, ")")),
NAs=gsub(" ", "", paste(NNAs, "(", prop_NAs, ")")))
return(tmp_mat)
}
#### Fonction pour le filtrage des elements selon les options choisies ####
ft_parse_quanti_opt<-function(data, min.max, na.print, group)
{
if (!isTRUE(min.max))
data<-data[,!names(data) %in% "Min-Max"]
if (!isTRUE(na.print))
{
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR))", sep = " ")
}
else if (isTRUE(na.print) && !is.null(group))
{
data[,'median(IQR)']<-paste(data[,'median(IQR)'], data[,'NAs'], sep = "; ")
data<-data[,!names(data) %in% "NAs"]
for (i in 1:nrow(data))
data[i,1]<-paste(data[i,1], "(median(IQR); NAs(%))", sep = " ")
}
return(data)
}
#### si pvalue est true #####
#' @import tidyr
ft_univ_quanti_p.value<-function(data, group, min.max, na.print,tab_tmp)
{
dicho<-ft_parse_quanti_opt(tab_tmp, min.max, na.print, group)
total<-ft_quanti(data, NULL, NULL, min.max, na.print)
biv<-ft_ana_biv(data, group)
total$Group <- "Total"
total<-merge(total, dicho, all=TRUE)
biv<-ft_rename_quanti_biv(biv, na.print)
total<-merge(total, biv, all.x=TRUE)
total<-total[,!names(total) %in% c("test", "signi")]
if (isTRUE(min.max))
total<-pivot_wider(total, names_from = "Group", values_from = c("median(IQR)", "Min-Max"))
else
total<-pivot_wider(total, names_from = "Group", values_from = c("median(IQR)"))
total$p<-ifelse(as.numeric(total$p) < 0.001, "< .001", round(as.numeric(total$p), digits = 3))
return(total)
}
### simple fonction coupee ####
ft_univ_quanti_2<-function(data, group, p.value, min.max, na.print, digits.opt){
tab_1<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab_1)=c("var", "Min-Max", "median(IQR)", "NAs")
tab_2<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab_2)=c("var", "Min-Max", "median(IQR)", "NAs")
j = 0;
for (i in 1:ncol(data))
{
if (colnames(data)[i]==group || !is.numeric(data[,i]))
next ;
j = j + 1
tmp_1<-ft_tab_quanti(data, i, group, levels(data[,group])[1], digits.opt)
tmp_2<-ft_tab_quanti(data, i, group, levels(data[,group])[2], digits.opt)
for (k in 1:4)
tab_1[j,k]<-tmp_1[k]
for (k in 1:4)
tab_2[j,k]<-tmp_2[k]
}
tab_1$Group=levels(data[,group])[1]
tab_2$Group=levels(data[,group])[2]
tmp<-merge(tab_1, tab_2, all=TRUE)
if (!isTRUE(p.value))
{
tmp<-ft_parse_quanti_opt(tmp, min.max, na.print, group)
if (!isTRUE(min.max))
tmp<-pivot_wider(tmp, names_from = "Group", values_from = "median(IQR)")
else
tmp<-pivot_wider(tmp, names_from = "Group", values_from = c("median(IQR)", "Min-Max"))
return (tmp)
}
else
return (ft_univ_quanti_p.value(data, group, min.max, na.print,tmp))
}
ft_quanti<-function(data, group=NULL, p.value, min.max, na.print, digits.opt){
if (is.null(group))
{
tab<-data.frame("var"=NA, "Min-Max"=NA, "median(IQR)"=NA, "NAs"=NA)
colnames(tab)=c("var", "Min-Max", "median(IQR)", "NAs")
j = 0
for (i in 1:ncol(data))
{
if (!is.numeric(data[,i]))
next;
j = j + 1
tmp<-ft_tab_quanti(data,i, NULL, NULL, digits.opt)
for (k in 1:4)
tab[j,k]<-tmp[k]
}
tab<-ft_parse_quanti_opt(tab, min.max, na.print, NULL)
return(tab)
}
else
return(ft_univ_quanti_2(data, group, p.value, min.max, na.print, digits.opt))
}
# library(doudpackage)
test<-ft_desc_tab(bdd)
setwd("/Users/Tiago/Desktop/BF is cool/Judith Breth")
bdd<-read.csv2("base_JB.2.csv")
library(lubridate)
library(tidyverse)
library(doudpackage)
summary(bdd)
for (i  in 1:ncol(bdd)){
if(is.character(bdd[,i])){
print(paste("to factor: ", colnames(bdd)[i]))
bdd[,i]<-as.factor(as.character(bdd[,i]))}
if (nlevels(bdd[,i]) >= 30 && colnames(bdd)[i]!="TTT" &&
colnames(bdd)[i]!="TOX.NON.HEMATO" && colnames(bdd)[i]!="IPP" &&
colnames(bdd)[i]!="NOM" && colnames(bdd)[i]!="PRENOM"){
print(paste("to Date: ", colnames(bdd)[i]))
bdd[,i]<-as.Date(bdd[,i], "%d/%m/%Y")}
if (is.numeric(bdd[,i]) && mean(bdd[,i], na.rm = TRUE) <= 2)
{
print(paste("to factor: ", colnames(bdd)[i]))
bdd[,i]<-as.factor(as.character(bdd[,i]))
}
}
summary(bdd$TUMEUR)
bdd$STADE<-as.factor(gsub("local.*", "localisee", ignore.case = TRUE, bdd$STADE))
bdd$STADE<-as.factor(gsub("meta.*", "matastatique", ignore.case = TRUE, bdd$STADE))
levels(bdd$STADE)[levels(bdd$STADE)==""]<-NA
summary(bdd$STADE)
summary(bdd)
summary(bdd$TTT)
bdd$TTT<-as.factor(str_to_lower(as.character(bdd$TTT)))
bdd$TTT<-as.factor(str_trim(as.character(bdd$TTT)))
levels(bdd$TTT)[levels(bdd$TTT)=="letrozole  palbociclib"]<-"letrozole palbociclib"
bdd$LDV_dep_PEC<-as.factor(as.character(str_trim(bdd$LDV_dep_PEC)))
levels(bdd$LDV_dep_PEC)[levels(bdd$LDV_dep_PEC)=="appartmement"]<-"appartement"
bdd$iADL<-as.numeric(bdd$iADL)
bdd$DENUTRITION<-as.factor(str_trim(as.character(bdd$DENUTRITION)))
levels(bdd$DENUTRITION)[levels(bdd$DENUTRITION)=="DM"]<-NA
levels(bdd$DC.a.6mois)[levels(bdd$DC.a.6mois)=="DM "]<-NA
bdd$Changement.de.lieu.de.vie<-as.factor(str_trim(as.character(bdd$Changement.de.lieu.de.vie)))
levels(bdd$Progression)[levels(bdd$Progression)=="DM"]<-NA
bdd<-rename(bdd, "ARR_TOX_CHIMIO"=ARRET.sur.TOX)
levels(bdd$ARR_TOX_CHIMIO)[levels(bdd$ARR_TOX_CHIMIO)=="0 (toxicite radiotherapie) "]<-"0"
bdd$REDUCTION.DOSE...pause<-as.factor(str_trim(as.character(bdd$REDUCTION.DOSE...pause)))
levels(bdd$REDUCTION.DOSE...pause)
bdd$REDUCTION.DOSE...pause<-as.factor(gsub(".*pause.*", "pause", bdd$REDUCTION.DOSE...pause))
bdd$REDUCTION.DOSE...pause<-as.factor(gsub(".*reduction.*", "reduction", bdd$REDUCTION.DOSE...pause))
bdd$REDUCTION.DOSE...pause<-as.factor(gsub(".*arret.*", "arret", bdd$REDUCTION.DOSE...pause))
bdd$TOX.NON.HEMATO<-gsub(".*3.*", "3", bdd$TOX.NON.HEMATO)
bdd$TOX.NON.HEMATO<-gsub(".*2.*", "2", bdd$TOX.NON.HEMATO)
bdd$TOX.NON.HEMATO<-gsub(".*1.*", "1", bdd$TOX.NON.HEMATO)
bdd$TOX.NON.HEMATO<-as.factor(bdd$TOX.NON.HEMATO)
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)=="OMI syndrome de permeabilite capillaire au gemzar "]<-"0"
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)=="douleur thoracique"]<-"0"
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)=="reaction anaphylactoide"]<-"0"
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)==""]<-NA
bdd<-bdd[,-which(colnames(bdd)=="PRENOM")]
cat("\014")
summary(bdd)
summary(bdd)
### Mergine des bases
bdd.2<-read.csv2('base_JB.3.csv')
summary(bdd.2)
colnames(bdd.2)[3]<-"NOM"
summary(bdd.2)
cat("\014")
for (i  in 1:ncol(bdd.2)){
if(is.character(bdd.2[,i])){
print(paste("to factor: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.factor(as.character(bdd.2[,i]))
}
if (is.numeric(bdd.2[,i]) && mean(bdd.2[,i], na.rm = TRUE) <= 2)
{
print(paste("to factor: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.factor(as.character(bdd.2[,i]))
}
if (colnames(bdd.2)[i]!="Scanner.AVANT" && colnames(bdd.2)[i]!="Scanner.Apres" &&
colnames(bdd.2)[i]!="Date.RCP" && colnames(bdd.2)[i]!="IPP" && colnames(bdd.2)[i]!="NOM")
{
print(paste("to num: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.numeric(as.character(bdd.2[,i]))
}
if (colnames(bdd.2)[i]=="Date.RCP" || colnames(bdd.2)[i]=="Scanner.AVANT" || colnames(bdd.2)[i]=="Scanner.Apres")
{
print(paste("to date: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.Date(bdd.2[,i], "%d/%m/%Y")
}
}
summary(bdd.2)
bdd.3<-bdd.3[,!names(bdd.3) %in% c("TTT", "TUMEUR", "IPP", "NOM")]
setwd("/Users/Tiago/Desktop/BF is cool/Judith Breth")
bdd<-read.csv2("base_JB.2.csv")
library(lubridate)
library(tidyverse)
library(doudpackage)
summary(bdd)
for (i  in 1:ncol(bdd)){
if(is.character(bdd[,i])){
print(paste("to factor: ", colnames(bdd)[i]))
bdd[,i]<-as.factor(as.character(bdd[,i]))}
if (nlevels(bdd[,i]) >= 30 && colnames(bdd)[i]!="TTT" &&
colnames(bdd)[i]!="TOX.NON.HEMATO" && colnames(bdd)[i]!="IPP" &&
colnames(bdd)[i]!="NOM" && colnames(bdd)[i]!="PRENOM"){
print(paste("to Date: ", colnames(bdd)[i]))
bdd[,i]<-as.Date(bdd[,i], "%d/%m/%Y")}
if (is.numeric(bdd[,i]) && mean(bdd[,i], na.rm = TRUE) <= 2)
{
print(paste("to factor: ", colnames(bdd)[i]))
bdd[,i]<-as.factor(as.character(bdd[,i]))
}
}
summary(bdd$TUMEUR)
bdd$STADE<-as.factor(gsub("local.*", "localisee", ignore.case = TRUE, bdd$STADE))
bdd$STADE<-as.factor(gsub("meta.*", "matastatique", ignore.case = TRUE, bdd$STADE))
levels(bdd$STADE)[levels(bdd$STADE)==""]<-NA
summary(bdd$STADE)
summary(bdd)
summary(bdd$TTT)
bdd$TTT<-as.factor(str_to_lower(as.character(bdd$TTT)))
bdd$TTT<-as.factor(str_trim(as.character(bdd$TTT)))
levels(bdd$TTT)[levels(bdd$TTT)=="letrozole  palbociclib"]<-"letrozole palbociclib"
bdd$LDV_dep_PEC<-as.factor(as.character(str_trim(bdd$LDV_dep_PEC)))
levels(bdd$LDV_dep_PEC)[levels(bdd$LDV_dep_PEC)=="appartmement"]<-"appartement"
bdd$iADL<-as.numeric(bdd$iADL)
bdd$DENUTRITION<-as.factor(str_trim(as.character(bdd$DENUTRITION)))
levels(bdd$DENUTRITION)[levels(bdd$DENUTRITION)=="DM"]<-NA
levels(bdd$DC.a.6mois)[levels(bdd$DC.a.6mois)=="DM "]<-NA
bdd$Changement.de.lieu.de.vie<-as.factor(str_trim(as.character(bdd$Changement.de.lieu.de.vie)))
levels(bdd$Progression)[levels(bdd$Progression)=="DM"]<-NA
bdd<-rename(bdd, "ARR_TOX_CHIMIO"=ARRET.sur.TOX)
levels(bdd$ARR_TOX_CHIMIO)[levels(bdd$ARR_TOX_CHIMIO)=="0 (toxicite radiotherapie) "]<-"0"
bdd$REDUCTION.DOSE...pause<-as.factor(str_trim(as.character(bdd$REDUCTION.DOSE...pause)))
levels(bdd$REDUCTION.DOSE...pause)
bdd$REDUCTION.DOSE...pause<-as.factor(gsub(".*pause.*", "pause", bdd$REDUCTION.DOSE...pause))
bdd$REDUCTION.DOSE...pause<-as.factor(gsub(".*reduction.*", "reduction", bdd$REDUCTION.DOSE...pause))
bdd$REDUCTION.DOSE...pause<-as.factor(gsub(".*arret.*", "arret", bdd$REDUCTION.DOSE...pause))
bdd$TOX.NON.HEMATO<-gsub(".*3.*", "3", bdd$TOX.NON.HEMATO)
bdd$TOX.NON.HEMATO<-gsub(".*2.*", "2", bdd$TOX.NON.HEMATO)
bdd$TOX.NON.HEMATO<-gsub(".*1.*", "1", bdd$TOX.NON.HEMATO)
bdd$TOX.NON.HEMATO<-as.factor(bdd$TOX.NON.HEMATO)
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)=="OMI syndrome de permeabilite capillaire au gemzar "]<-"0"
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)=="douleur thoracique"]<-"0"
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)=="reaction anaphylactoide"]<-"0"
levels(bdd$TOX.NON.HEMATO)[levels(bdd$TOX.NON.HEMATO)==""]<-NA
bdd<-bdd[,-which(colnames(bdd)=="PRENOM")]
cat("\014")
summary(bdd)
### Mergine des bases
bdd.2<-read.csv2('base_JB.3.csv')
summary(bdd.2)
colnames(bdd.2)[3]<-"NOM"
summary(bdd.2)
cat("\014")
for (i  in 1:ncol(bdd.2)){
if(is.character(bdd.2[,i])){
print(paste("to factor: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.factor(as.character(bdd.2[,i]))
}
if (is.numeric(bdd.2[,i]) && mean(bdd.2[,i], na.rm = TRUE) <= 2)
{
print(paste("to factor: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.factor(as.character(bdd.2[,i]))
}
if (colnames(bdd.2)[i]!="Scanner.AVANT" && colnames(bdd.2)[i]!="Scanner.Apres" &&
colnames(bdd.2)[i]!="Date.RCP" && colnames(bdd.2)[i]!="IPP" && colnames(bdd.2)[i]!="NOM")
{
print(paste("to num: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.numeric(as.character(bdd.2[,i]))
}
if (colnames(bdd.2)[i]=="Date.RCP" || colnames(bdd.2)[i]=="Scanner.AVANT" || colnames(bdd.2)[i]=="Scanner.Apres")
{
print(paste("to date: ", colnames(bdd.2)[i]))
bdd.2[,i]<-as.Date(bdd.2[,i], "%d/%m/%Y")
}
}
summary(bdd.2)
bdd.3<-merge(bdd, bdd.2, all = T)
bdd.3<-bdd.3[,!names(bdd.3) %in% c("TTT", "TUMEUR", "IPP", "NOM")]
biv<-ft_ana_biv(bdd.3, "DC.a.6mois")
library(psy)
acp_exp.1<-c(biv$var[order(biv$p)][1:10])
# fpca(data=bdd.3, y="DC.a.6mois", x=acp_exp.1)
acp_exp.1
acp_exp.2<-c(biv$var[order(biv$p)][11:22])
# fpca(data=bdd.3, y="DC.a.6mois", x=acp_exp.2)
acp_exp.2
acp_exp.3<-c("SIOG.1", "SIOG.2", "SAT", "SAT.plus.VAT", "VAT", "SAT.2", "IMC")
# fpca(data=bdd.3, y="DENUTRITION", x=acp_exp.3)
### Modele
reg_glm<-glm(DC.a.6mois~AGE+SEXE+SAT+SIOG.1, data=bdd.3, family = "binomial")
table(bdd.3$DC.a.6mois)[2]
