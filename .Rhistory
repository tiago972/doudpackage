source('./ft_ana_biv.R')
source('./ft_quanti.R')
source('./ft_univ_tab.R')
source('./ft_parse.R')
setwd("C:/Users/4092931/Documents/GitHub/Scripts.PBR/Lea")
source('./Lea.R')
setwd("C:/Users/4092931/Documents/GitHub/doudpackage/tmp")
bdd<-droplevels(bdd[!bdd$Mortalite.a.J30 == 'ehpad les grands cedres',])
a<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quali = T)
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
res_a
b<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quanti = T)
res_b<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
res_b
res_b<-ft_parse(b, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
res_b
101-17
#' @param group The variable of interest for you univariate analysis to sub-grouped by.
#' @param complete Wether to print quantitative and qualitative variables; default = TRUE
#' @param quanti To be used only if complete is FALSE. If TRUE, returns only the univariate analysis for quantitative variables
#' @param quali To be used only if complete is FALSE. If TRUE returns only the univariate analysis for qualitative variables
#' @param na.print Wether to print NAs n(%), default = FALSE. Note that if true, "Total" will also be printed. This will be change in a futur version
#' @param p.value Print p value. Group needs to be set; default = TRUE. If TRUE, "Total" will also be printed
#' @param min.max Display min and max value for quantitative variables; default is false
#' @param digits.opt How many numbers after the "." you'd like for the proportions of qualitative variables; default is 0
#' @return The object returned depends on the "parse" option:either a dataframe or a kable oject
#' @export
ft_desc_tab<-function(data, group=NULL, complete = TRUE, quanti=FALSE, quali=FALSE, na.print = FALSE, p.value=TRUE, min.max=FALSE, digits.opt=1)
{
if ((ft_error(data, group, complete, quanti, quali)) == -1)
return(-1)
if (!is.null(group) && table(data[,group], useNA = "always")[nlevels(data[,group]) + 1] != 0)
{
warning(paste(table(data[,group], useNA = "always")[nlevels(data[,group]) + 1], " rows have been deleted due to missing values in the defined group" ,sep = ""))
data<-data[!is.na(data[,group]),]
print(nrow(data))
}
if (isTRUE(quanti)||isTRUE(quali))
complete=FALSE
if (isTRUE(complete) || isTRUE(quanti))
quanti_tab<-ft_parse_quanti_opt(ft_quanti(data, group, p.value, min.max, na.print, digits.opt), min.max, na.print, p.value, group)
if (isTRUE(complete) || isTRUE(quali))
quali_tab<-ft_parse_quali_opt(ft_quali(data, group, p.value, na.print, digits.opt), na.print, p.value, group)
if (!isTRUE(complete) && isTRUE(quanti))
return(quanti_tab)
else if (!isTRUE(complete) && isTRUE(quali))
return(quali_tab)
res<-rbind(quanti_tab, quali_tab)
return (res)
}
a<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quali = T)
b<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quanti = T)
## Function to rename columns according to the counts of each sub-group
ft_name_col<-function(res, data, group, digits.opt)
{
print(nrow(data))
tmp_factor<-levels(data[,group])
tmp_table<-table(data[,group], useNA = "always")
tmp_prop.table<-round(prop.table(table(data[,group], useNA = "always")) * 100, digits = digits.opt)
for (i in 1:nlevels(data[,group]))
colnames(res)[which(colnames(res) == levels(data[,group])[i])] <- paste("n = ", tmp_table[i], "(", tmp_prop.table[i],
"%)", sep = "")
colnames(res)[which(colnames(res) == "Total")]<-paste("n = ", nrow(data), sep = "")
return(res)
}
#' @param group The variable of interest for you univariate analysis to sub-grouped by.
#' @param complete Wether to print quantitative and qualitative variables; default = TRUE
#' @param quanti To be used only if complete is FALSE. If TRUE, returns only the univariate analysis for quantitative variables
#' @param quali To be used only if complete is FALSE. If TRUE returns only the univariate analysis for qualitative variables
#' @param na.print Wether to print NAs n(%), default = FALSE. Note that if true, "Total" will also be printed. This will be change in a futur version
#' @param p.value Print p value. Group needs to be set; default = TRUE. If TRUE, "Total" will also be printed
#' @param min.max Display min and max value for quantitative variables; default is false
#' @param digits.opt How many numbers after the "." you'd like for the proportions of qualitative variables; default is 0
#' @return The object returned depends on the "parse" option:either a dataframe or a kable oject
#' @export
ft_desc_tab<-function(data, group=NULL, complete = TRUE, quanti=FALSE, quali=FALSE, na.print = FALSE, p.value=TRUE, min.max=FALSE, digits.opt=1)
{
if ((ft_error(data, group, complete, quanti, quali)) == -1)
return(-1)
if (!is.null(group) && table(data[,group], useNA = "always")[nlevels(data[,group]) + 1] != 0)
{
warning(paste(table(data[,group], useNA = "always")[nlevels(data[,group]) + 1], " rows have been deleted due to missing values in the defined group" ,sep = ""))
data<-data[!is.na(data[,group]),]
}
if (isTRUE(quanti)||isTRUE(quali))
complete=FALSE
if (isTRUE(complete) || isTRUE(quanti))
quanti_tab<-ft_parse_quanti_opt(ft_quanti(data, group, p.value, min.max, na.print, digits.opt), min.max, na.print, p.value, group)
if (isTRUE(complete) || isTRUE(quali))
quali_tab<-ft_parse_quali_opt(ft_quali(data, group, p.value, na.print, digits.opt), na.print, p.value, group)
if (!isTRUE(complete) && isTRUE(quanti))
return(quanti_tab)
else if (!isTRUE(complete) && isTRUE(quali))
return(quali_tab)
res<-rbind(quanti_tab, quali_tab)
return (res)
}
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c(1,5,col.order,2)]
else
res<-res[,c(1,5,3,4,2)]
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
setwd("C:/Users/4092931/Documents/GitHub/doudpackage/R")
source('./ft_quali.R')
source('./ft_quanti.R')
source('./tools.R')
source('./ft_ana_biv.R')
source('./ft_quanti.R')
source('./ft_univ_tab.R')
source('./ft_parse.R')
setwd("C:/Users/4092931/Documents/GitHub/Scripts.PBR/Lea")
source('./Lea.R')
setwd("C:/Users/4092931/Documents/GitHub/doudpackage/tmp")
bdd<-droplevels(bdd[!bdd$Mortalite.a.J30 == 'ehpad les grands cedres',])
a<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quali = T)
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
b<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quanti = T)
res_b<-ft_parse(b, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
setwd("C:/Users/4092931/Documents/GitHub/doudpackage/R")
source('./ft_quali.R')
source('./ft_quanti.R')
source('./tools.R')
source('./ft_ana_biv.R')
source('./ft_quanti.R')
source('./ft_univ_tab.R')
source('./ft_parse.R')
setwd("C:/Users/4092931/Documents/GitHub/Scripts.PBR/Lea")
source('./Lea.R')
setwd("C:/Users/4092931/Documents/GitHub/doudpackage/tmp")
bdd<-droplevels(bdd[!bdd$Mortalite.a.J30 == 'ehpad les grands cedres',])
a<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quali = T)
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
b<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quanti = T)
res_b<-ft_parse(b, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
setwd("C:/Users/4092931/Documents/GitHub/doudpackage/R")
source('./ft_quali.R')
source('./ft_quanti.R')
source('./tools.R')
source('./ft_ana_biv.R')
source('./ft_quanti.R')
source('./ft_univ_tab.R')
source('./ft_parse.R')
setwd("C:/Users/4092931/Documents/GitHub/Scripts.PBR/Lea")
source('./Lea.R')
setwd("C:/Users/4092931/Documents/GitHub/doudpackage/tmp")
bdd<-droplevels(bdd[!bdd$Mortalite.a.J30 == 'ehpad les grands cedres',])
a<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quali = T)
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
res_a
summary(bdd$Mortalite.a.J30)
b<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quanti = T)
res_b<-ft_parse(b, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
res_b
## Function to rename columns according to the counts of each sub-group
ft_name_col<-function(res, data, group, digits.opt)
{
print(colnames(res))
tmp_factor<-levels(data[,group])
tmp_table<-table(data[,group], useNA = "always")
tmp_prop.table<-round(prop.table(table(data[,group], useNA = "always")) * 100, digits = digits.opt)
for (i in 1:nlevels(data[,group]))
colnames(res)[which(colnames(res) == levels(data[,group])[i])] <- paste("n = ", tmp_table[i], "(", tmp_prop.table[i],
"%)", sep = "")
colnames(res)[which(colnames(res) == "Total")]<-paste("n = ", nrow(data), sep = "")
return(res)
}
bdd<-droplevels(bdd[!bdd$Mortalite.a.J30 == 'ehpad les grands cedres',])
a<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quali = T)
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
b<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quanti = T)
res_b<-ft_parse(b, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
## Function to rename columns according to the counts of each sub-group
ft_name_col<-function(res, data, group, digits.opt)
{
# print(colnames(res))
tmp_factor<-levels(data[,group])
tmp_table<-table(data[,group], useNA = "always")
tmp_prop.table<-round(prop.table(table(data[,group], useNA = "always")) * 100, digits = digits.opt)
for (i in 1:nlevels(data[,group]))
colnames(res)[which(colnames(res) == levels(data[,group])[i])] <- paste("n = ", tmp_table[i], "(", tmp_prop.table[i],
"%)", sep = "")
colnames(res)[which(colnames(res) == "Total")]<-paste("n = ", nrow(data), sep = "")
return(res)
}
### En fait à terme il faut créer un objet d'une nouvelle classe
# avec toutes les données nécessaires au parsing
#' Parsing function for Html output
#'
#' Function that allows you to create a table ready to be used in article.
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
print(colnames(res))
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c(1,5,col.order,2)]
else
res<-res[,c(1,5,3,4,2)]
print(colnames(res))
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
res_b<-ft_parse(b, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
print(colnames(res))
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c("var","Total",col.order,"p")]
else
res<-res[,c("var","Total",3,4,"p")]
print(colnames(res))
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
print(colnames(res))
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c("var","Total"),col.order,"p"]
else
res<-res[,c("var","Total",3,4,"p")]
print(colnames(res))
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
print(colnames(res))
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c(c("var","Total"),col.order,"p")]
else
res<-res[,c("var","Total",3,4,"p")]
print(colnames(res))
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
print(colnames(res))
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c(which(colnames(bdd)) == "var", which(colnames(bdd)) =="Total", col.order ,which(colnames(bdd)) =="p")]
else
res<-res[,c("var","Total",3,4,"p")]
print(colnames(res))
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
which(colnames(bdd)) == "Mortalite.a.J30")
which(colnames(bdd) == "Mortalite.a.J30")
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
print(colnames(res))
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c(which(colnames(data) == "var"), which(colnames(data) =="Total"), col.order, which(colnames(data) =="p"))]
else
res<-res[,c("var","Total",3,4,"p")]
print(colnames(res))
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
a<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quali = T)
which(colnames(a) == "var")
#'  Output is generated in HTML by KableExtra
#' @param res Outpul of ft_desc_tab
#' @param data A database, dataframe object
#' @param col.order A vector containing column indexes or names to use for column order
#' @param group The name of the group used in ft_desc_tab
#' @param group.name Vector containing subgroup names
#' @param digits.opt How many numbers to display after the ".". Should be the same as provided in ft_desc_tab, default is 0
#' @import kableExtra
#' @return Return a html KableExtra object.
#' @export
ft_parse<-function(res, data, group, col.order = NULL, group.name = NULL, digits.opt = 1)
{
print(colnames(res))
data<-data[!is.na(data[,group]),]
if (!is.null(col.order))
res<-res[,c(which(colnames(res) == "var"), which(colnames(res) =="Total"), col.order, which(colnames(res) =="p"))]
else
res<-res[,c("var","Total",3,4,"p")]
print(colnames(res))
if (is.null(group.name))
{
group.name[1]<-colnames(res[,3])
group.name[2]<-colnames(res[,4])
}
res<-ft_name_col(res, data, group, digits.opt)
ident<-grep("Missing values.*", res$var)
colnames(res)[which(colnames(res) == "var")]<-""
res<-kableExtra::kable(res) %>%
kableExtra::kable_classic() %>%
kableExtra::add_header_above(c(" ", "Total" = 1, setNames(1, group.name[1]),
setNames(1, group.name[2]), " ")) %>%
kableExtra::add_indent(ident)
return(res)
}
res_a<-ft_parse(a, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
b<-ft_desc_tab(bdd, group = "Mortalite.a.J30",complete = F, quanti = T)
res_b<-ft_parse(b, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
#' @param group The variable of interest for you univariate analysis to sub-grouped by.
#' @param complete Wether to print quantitative and qualitative variables; default = TRUE
#' @param quanti To be used only if complete is FALSE. If TRUE, returns only the univariate analysis for quantitative variables
#' @param quali To be used only if complete is FALSE. If TRUE returns only the univariate analysis for qualitative variables
#' @param na.print Wether to print NAs n(%), default = FALSE. Note that if true, "Total" will also be printed. This will be change in a futur version
#' @param p.value Print p value. Group needs to be set; default = TRUE. If TRUE, "Total" will also be printed
#' @param min.max Display min and max value for quantitative variables; default is false
#' @param digits.opt How many numbers after the "." you'd like for the proportions of qualitative variables; default is 0
#' @return The object returned depends on the "parse" option:either a dataframe or a kable oject
#' @export
ft_desc_tab<-function(data, group=NULL, complete = TRUE, quanti=FALSE, quali=FALSE, na.print = FALSE, p.value=TRUE, min.max=FALSE, digits.opt=1)
{
if ((ft_error(data, group, complete, quanti, quali)) == -1)
return(-1)
if (!is.null(group) && table(data[,group], useNA = "always")[nlevels(data[,group]) + 1] != 0)
{
warning(paste(table(data[,group], useNA = "always")[nlevels(data[,group]) + 1], " rows have been deleted due to missing values in the defined group" ,sep = ""))
data<-data[!is.na(data[,group]),]
}
if (isTRUE(quanti)||isTRUE(quali))
complete=FALSE
if (isTRUE(complete) || isTRUE(quanti))
{
quanti_tab<-ft_parse_quanti_opt(ft_quanti(data, group, p.value, min.max, na.print, digits.opt), min.max, na.print, p.value, group)
print(colnames(quanti_tab))
}
if (isTRUE(complete) || isTRUE(quali))
{
quali_tab<-ft_parse_quali_opt(ft_quali(data, group, p.value, na.print, digits.opt), na.print, p.value, group)
print(colnames(quali_tab))
}
if (!isTRUE(complete) && isTRUE(quanti))
return(quanti_tab)
else if (!isTRUE(complete) && isTRUE(quali))
return(quali_tab)
res<-rbind(quanti_tab, quali_tab)
return (res)
}
c<-ft_desc_tab(bdd, group = "Mortalite.a.J30")
c
View(c)
?rbind
res_c<-ft_parse(c, bdd, group="Mortalite.a.J30", col.order = c(3,4), group.name = c("0","1"))
res_c
